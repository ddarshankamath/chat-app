{"version":3,"sources":["firebase.js","SidebarChat.js","StateProvider.js","Sidebar.js","Chat.js","reducer.js","Login.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","SidebarChat","id","name","addNewChat","useState","seed","setSeed","messages","setMessages","useEffect","Math","floor","random","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","onClick","roomName","prompt","add","className","to","Avatar","src","message","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","Sidebar","rooms","setRooms","user","unsubscribe","photoURL","IconButton","type","room","key","Chat","input","setInput","roomId","useParams","setRoomName","Date","length","timestamp","toDate","toUTCString","displayName","console","log","onChange","e","target","placeholder","preventDefault","FieldValue","serverTimestamp","actionTypes","state","action","Login","dispatch","alt","Button","signInWithPopup","then","result","catch","error","alert","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1c37e3ab.chunk.js","sourcesContent":["import firebase from \"firebase\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDNZQ9xuWOJtm4b3LGnRrmQnctGHodKwUQ\",\n  authDomain: \"chat-app-70533.firebaseapp.com\",\n  projectId: \"chat-app-70533\",\n  storageBucket: \"chat-app-70533.appspot.com\",\n  messagingSenderId: \"905110194113\",\n  appId: \"1:905110194113:web:7a8e129a786b19bfe39140\",\n  measurementId: \"G-2DJFKMR1RB\",\n};\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\nconst db = firebaseApp.firestore();\nconst auth = firebase.auth();\nconst provider = new firebase.auth.GoogleAuthProvider();\n\nexport { auth, provider };\nexport default db;\n","import React, { useState, useEffect } from \"react\";\nimport { Avatar } from \"@material-ui/core\";\nimport { Link } from \"react-router-dom\";\n\nimport \"./SidebarChat.css\";\nimport db from \"./firebase\";\n\nfunction SidebarChat({ id, name, addNewChat }) {\n  const [seed, setSeed] = useState(\"\");\n  const [messages, setMessages] = useState(\"\");\n\n  useEffect(() => {\n    setSeed(Math.floor(Math.random() * 5000));\n  }, []);\n\n  useEffect(() => {\n    if (id) {\n      db.collection(\"rooms\")\n        .doc(id)\n        .collection(\"messages\")\n        .orderBy(\"timestamp\", \"desc\")\n        .onSnapshot((snapshot) =>\n          setMessages(snapshot.docs.map((doc) => doc.data()))\n        );\n    }\n  }, [id]);\n\n  const createChat = () => {\n    const roomName = prompt(\"Please enter name for chat room\");\n\n    if (roomName) {\n      db.collection(\"rooms\").add({\n        name: roomName,\n      });\n    }\n  };\n\n  return !addNewChat ? (\n    <Link to={`/rooms/${id}`}>\n      <div className=\"sidebarChat\">\n        <Avatar src={`https://avatars.dicebear.com/api/human/${seed}.svg`} />\n        <div className=\"sidebarchat-info\">\n          <h2>{name}</h2>\n          <p>{messages[0]?.message}</p>\n        </div>\n      </div>\n    </Link>\n  ) : (\n    <div onClick={createChat} className=\"new-chat\">\n      <h2>Add new Chat</h2>\n    </div>\n  );\n}\n\nexport default SidebarChat;\n","import React, { createContext, useContext, useReducer } from \"react\";\n\nexport const StateContext = createContext();\n\nexport const StateProvider = ({ reducer, initialState, children }) => (\n  <StateContext.Provider value={useReducer(reducer, initialState)}>\n    {children}\n  </StateContext.Provider>\n);\n\nexport const useStateValue = () => useContext(StateContext);\n","import React, { useState, useEffect } from \"react\";\nimport { Avatar, IconButton } from \"@material-ui/core\";\nimport DonutLargeIcon from \"@material-ui/icons/DonutLarge\";\nimport ChatIcon from \"@material-ui/icons/Chat\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport SearchOutlined from \"@material-ui/icons/SearchOutlined\";\n\nimport \"./Sidebar.css\";\nimport SidebarChat from \"./SidebarChat\";\nimport db from \"./firebase\";\nimport { useStateValue } from \"./StateProvider\";\n\nfunction Sidebar() {\n  const [rooms, setRooms] = useState([]);\n  const [{ user }, dispatch] = useStateValue();\n\n  useEffect(() => {\n    const unsubscribe = db.collection(\"rooms\").onSnapshot((snapshot) =>\n      setRooms(\n        snapshot.docs.map((doc) => ({\n          id: doc.id,\n          data: doc.data(),\n        }))\n      )\n    );\n\n    return () => {\n      unsubscribe();\n    };\n  }, []);\n\n  return (\n    <div className=\"sidebar\">\n      <div className=\"sidebar-header\">\n        <Avatar src={user?.photoURL} />\n        <div className=\"header-right\">\n          <IconButton>\n            <DonutLargeIcon />\n          </IconButton>\n          <IconButton>\n            <ChatIcon />\n          </IconButton>\n          <IconButton>\n            <MoreVertIcon />\n          </IconButton>\n        </div>\n      </div>\n      <div className=\"sidebar-search\">\n        <div className=\"search-container\">\n          <SearchOutlined />\n          <input type=\"text\" />\n        </div>\n      </div>\n      <div className=\"sidebar-chat\">\n        <SidebarChat addNewChat />\n        {rooms.map((room) => (\n          <SidebarChat key={room.id} id={room.id} name={room.data.name} />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default Sidebar;\n","import React, { useState, useEffect } from \"react\";\nimport \"./Chat.css\";\nimport { Avatar, IconButton } from \"@material-ui/core\";\nimport SearchOutlined from \"@material-ui/icons/SearchOutlined\";\nimport AttachFile from \"@material-ui/icons/AttachFile\";\nimport MoreVert from \"@material-ui/icons/MoreVert\";\nimport InsertEmoticonIcon from \"@material-ui/icons/InsertEmoticon\";\nimport MicIcon from \"@material-ui/icons/Mic\";\nimport { useParams } from \"react-router-dom\";\nimport db from \"./firebase\";\nimport firebase from \"firebase\";\nimport { useStateValue } from \"./StateProvider\";\n\nfunction Chat() {\n  const [input, setInput] = useState(\"\");\n  const [seed, setSeed] = useState(\"\");\n  const { roomId } = useParams();\n  const [roomName, setRoomName] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const [{ user }, dispatch] = useStateValue();\n\n  useEffect(() => {\n    if (roomId) {\n      db.collection(\"rooms\")\n        .doc(roomId)\n        .onSnapshot((snapshot) => setRoomName(snapshot.data().name));\n\n      db.collection(\"rooms\")\n        .doc(roomId)\n        .collection(\"messages\")\n        .orderBy(\"timestamp\", \"asc\")\n        .onSnapshot((snapshot) =>\n          setMessages(snapshot.docs.map((doc) => doc.data()))\n        );\n    }\n  }, [roomId]);\n\n  useEffect(() => {\n    setSeed(Math.floor(Math.random() * 5000));\n  }, [roomId]);\n\n  const sendMessage = (e) => {\n    e.preventDefault();\n\n    db.collection(\"rooms\").doc(roomId).collection(\"messages\").add({\n      message: input,\n      name: user.displayName,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n    });\n\n    setInput(\"\");\n  };\n\n  return (\n    <div className=\"chat\">\n      <div className=\"chat-header\">\n        <Avatar src={`https://avatars.dicebear.com/api/human/${seed}.svg`} />\n\n        <div className=\"chat-header-info\">\n          <h3>{roomName}</h3>\n          <p>\n            last seen{\" \"}\n            {new Date(\n              messages[messages.length - 1]?.timestamp?.toDate()\n            ).toUTCString()}\n          </p>\n        </div>\n\n        <div className=\"chat-header-right\">\n          <IconButton>\n            <SearchOutlined />\n          </IconButton>\n          <IconButton>\n            <AttachFile />\n          </IconButton>\n          <IconButton>\n            <MoreVert />\n          </IconButton>\n        </div>\n      </div>\n\n      <div className=\"chat-body\">\n        {messages.map((message) => (\n          <p\n            className={`chat-message ${\n              message.name === user.displayName && \"chat-reciver\"\n            }`}\n          >\n            {console.log(\"____<><><>\", message.name, user.displayName)}\n            <span className=\"chat-name\">{message.name}</span>\n            {message.message}\n            <span className=\"chat-time\">\n              {new Date(message.timestamp?.toDate()).toUTCString()}\n            </span>\n          </p>\n        ))}\n      </div>\n      <div className=\"chat-footer\">\n        <InsertEmoticonIcon />\n        <form>\n          <input\n            value={input}\n            onChange={(e) => setInput(e.target.value)}\n            placeholder=\"Type a message\"\n            type=\"text\"\n          />\n          <button onClick={sendMessage} type=\"submit\">\n            Send a message\n          </button>\n        </form>\n        <MicIcon />\n      </div>\n    </div>\n  );\n}\n\nexport default Chat;\n","export const initialState = {\n  user: null,\n};\n\nexport const actionTypes = {\n  SET_USER: \"SET_USER\",\n};\n\nconst reducer = (state, action) => {\n  console.log(action);\n  switch (action.type) {\n    case actionTypes.SET_USER:\n      return {\n        ...state,\n        user: action.user,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import React from \"react\";\nimport \"./Login.css\";\nimport { Button } from \"@material-ui/core\";\nimport { auth, provider } from \"./firebase\";\nimport { useStateValue } from \"./StateProvider\";\nimport { actionTypes } from \"./reducer\";\n\nfunction Login() {\n  const [{}, dispatch] = useStateValue();\n\n  const signIn = () => {\n    auth\n      .signInWithPopup(provider)\n      .then((result) => {\n        dispatch({\n          type: actionTypes.SET_USER,\n          user: result.user,\n        });\n      })\n      .catch((error) => alert(error.message));\n  };\n\n  return (\n    <div className=\"login\">\n      <div className=\"login-container\">\n        <img\n          src=\"https://upload.wikimedia.org/wikipedia/commons/6/6b/WhatsApp.svg\"\n          alt=\"\"\n        />\n        <div className=\"login-text\"></div>\n\n        <Button type=\"submit\" onClick={signIn}>\n          <p>Sign in with Google</p>\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default Login;\n","import React, { useState } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport Sidebar from \"./Sidebar\";\nimport Chat from \"./Chat\";\nimport Login from \"./Login\";\nimport { useStateValue } from \"./StateProvider\";\n\nfunction App() {\n  const [{ user }, dispatch] = useStateValue();\n  return (\n    <div className=\"app\">\n      {!user ? (\n        <Login />\n      ) : (\n        <div className=\"app-body\">\n          <Router>\n            <Sidebar />\n            <Switch>\n              <Route path=\"/rooms/:roomId\">\n                <Chat />\n              </Route>\n              <Route path=\"/\">\n                <Chat />\n              </Route>\n            </Switch>\n          </Router>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport reducer, { initialState } from \"./reducer\";\nimport { StateProvider } from \"./StateProvider\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <StateProvider initialState={initialState} reducer={reducer}>\n      <App />\n    </StateProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}